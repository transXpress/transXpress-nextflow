////
//// nextflow parameters ////
////

includeConfig 'cluster.config'

//params.tmhmmPyCondaEnvPath = "${CONDA_PREFIX}/envs/tmhmm.py" //Commented out that process, TBD if I want to implement it

////
//// transXpress parameters ////
////

params.storeDB = "/oasis/tscc/scratch/tfallon/transXpress_store/" //All the used bioinformatic databases (e.g. pfam, swissprot) will be downloaded to this location
//Needs ~10 GB of space, and should be on a shared filesystem to enable all forked transXpress processes to access the files.

//By default, transXpress will add a prefix to your transcriptome assembly in the form <date>_<metadata>_<assembler>
//You may disable all these additions if you do not like them.
//For the <metadata> parameter, we suggest you put the "Genus species" of the main species your dataset describes
//but, you are free to disable the metadata parameter or use it to record non-genus-species metadata e.g. sample identifier
params.prefix_add_date = true //Set to false to disable
params.prefix_add_date_formatting = "yyMMdd" //See https://docs.oracle.com/javase/8/docs/api/java/text/SimpleDateFormat.html to change this formatting 
params.prefix_add_metadata_file = "./prefix.txt" //Expects to find a text file with the content within separated by spaces. Set to "" to disable
params.prefix_add_assembler = true //Will add Trinity or rnaSPAdes to the prefix, depending on which assembler is used

//Paths to the Raw fastq reads used by transXpress are specified in this file.  See the documentation for instructions on creating this file
params.samples = "samples.tsv"

params.trimmomatic_adapter_file = "./adapters.fasta" //This file contains many types of sequencing adapters for automated removal with trimmomatic
params.TRIMMOMATIC_PARAMS = "ILLUMINACLIP:adapters.fasta:2:30:10 SLIDINGWINDOW:4:5 LEADING:5 TRAILING:5 MINLEN:25" //transXpress will automatically rename the params.trimmomatic_adapters file to ./adapters.fasta internally 

params.TRINITY_PARAMS = " --seqType fq"
params.RNASPADES_PARAMS = ""

params.SIGNALP_ORGANISMS = "euk"
//// See below for the profiles that choose which HPC system to use, and whether or you want to do a stranded or unstranded assembly

profiles {
  notStrandSpecific_local {
    process.executor = "local"
// Used for both trinity and kallisto jobs!
    params.STRAND_SPECIFIC_TRINITY = "" // --SS_lib_type=RF
    params.STRAND_SPECIFIC_RNASPADES = "" // --ss-rf
    params.TRINITY_PARAMS += " --min_glue 2"
    params.TRINITY_PARAMS += " --min_kmer_cov 2"
    params.TRINITY_PARAMS += " --no_normalize_reads"
    
  }

  strandSpecific_local {
    process.executor = "local"
// Used for both trinity and kallisto jobs!
    params.STRAND_SPECIFIC_TRINITY = "--SS_lib_type=RF"
    params.STRAND_SPECIFIC_RNASPADES = "--ss-rf" 
    params.TRINITY_PARAMS += " --min_glue 2"
    params.TRINITY_PARAMS += " --min_kmer_cov 2"
    params.TRINITY_PARAMS += " --no_normalize_reads"

  }

  notStrandSpecific_cluster {
    // Used for both trinity and kallisto jobs!
    params.STRAND_SPECIFIC_TRINITY = ""
    params.STRAND_SPECIFIC_RNASPADES = ""
    params.TRINITY_PARAMS += " --min_glue 2"
    params.TRINITY_PARAMS += " --min_kmer_cov 2"
    params.TRINITY_PARAMS += " --no_normalize_reads"

  }

  strandSpecific_cluster {
    // Used for both trinity and kallisto jobs!
    params.STRAND_SPECIFIC_TRINITY = "--SS_lib_type=RF"
    params.STRAND_SPECIFIC_RNASPADES = "--ss-rf"
    params.TRINITY_PARAMS += " --min_glue 2"
    params.TRINITY_PARAMS += " --min_kmer_cov 2"
    params.TRINITY_PARAMS += " --no_normalize_reads"

  }

  test_notStrandSpecific_local {
    process.executor = "local"
    params.general_CPUs = 2
    params.assembly_CPUs = 2 //In cores. Used for Trinity and rnaSPAdes non-parallelized phases
    params.assembly_MEM = 1 //In gigabases. Used for Trinity and rnaSPAdes high memory phases
    params.storeDB = "./transXpress_db/"
    process.maxForks = 2 //if running locally, otherwise no limit
    report.enabled = true
    trace.enabled = true
    dag.enabled = true
    dag.file = "test_nonSS_dag.svg"
    report.file = "test_nonSS_report.html"

    params.TRINITY_PARAMS = " --seqType fq"
    // Used for both trinity and kallisto jobs!
    params.STRAND_SPECIFIC_TRINITY = "" // --SS_lib_type=RF
    params.STRAND_SPECIFIC_RNASPADES = "" // "--ss-rf"
    params.TRINITY_PARAMS += " --min_glue 2"
    params.TRINITY_PARAMS += " --min_kmer_cov 10"
    params.TRINITY_PARAMS += " --no_normalize_reads"

  }
  test_strandSpecific_local {
    process.executor = "local"
    params.general_CPUs = 2
    params.assembly_CPUs = 2 //In cores. Used for Trinity and rnaSPAdes non-parallelized phases
    params.assembly_MEM = 1 //In gigabases. Used for Trinity and rnaSPAdes high memory phases
    params.storeDB = "./transXpress_db/"
    process.maxForks = 2 //if running locally, otherwise no limit
    report.enabled = true
    trace.enabled = true
    dag.enabled = true
    dag.file = "test_nonSS_dag.svg"
    report.file = "test_nonSS_report.html"

    params.TRINITY_PARAMS = " --seqType fq"
    // Used for both trinity and kallisto jobs!
    params.STRAND_SPECIFIC_TRINITY = "--SS_lib_type=RF"
    params.STRAND_SPECIFIC_RNASPADES = "--ss-rf"
    params.TRINITY_PARAMS += " --min_glue 2"
    params.TRINITY_PARAMS += " --min_kmer_cov 10"
    params.TRINITY_PARAMS += " --no_normalize_reads"

  }
} 
